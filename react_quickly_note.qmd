---
title: React Quickly Note
---

## Chapter 2

`2.1 Create a new React app`

[See React Quickly](https://livebook.manning.com/book/react-quickly-second-edition/chapter-2/v-13/21){target="_blank"}

```default
npx create-react-app name-of-app

Success! Created name-of-app at <folder>
Inside that directory, you can run several commands:
 
  npm start
    Starts the development server.
 
  npm run build
    Bundles the app into static files for production.
 
  npm test
    Starts the test runner.
 
  npm run eject
    Removes this tool and copies build dependencies, configuration
    files and scripts into the app directory. If you do this, you
    can't go back!
 
We suggest that you begin by typing:
 
  cd name-of-app
  npm start
 
Happy hacking!
```

## Chapter 3


```sh
npx create-react-app rq03-jsx-links --template rq03-jsx-links
```

`3.2.3 Multiline JSX objects`

`3.2.4 Outputting variables in JSX`

Use curly braces to output variable.
```js
class DateTimeNow extends React.Component {
  render() {
    const dateTimeNow = new Date().toLocaleString()
    return <span>Current date and time is {dateTimeNow}.</span>
  }
}
```

`3.2.5 Working with properties in JSX`

Render properties of an object
```js
return (
  <Post
    id={post.id}
    title={post.title}
    content={post.content}
  />
);
```
Render all properties of an object
```js
return <Post {...post} />;
```

```sh
npx create-react-app rq03-children --template rq03-children
```

`3.2.6 Branching in JSX`

There are only six falsy values:

* false
* 0
* "" (empty string)
* null
* Undefined
* NaN (not a number)


```sh
npx create-react-app rq03-cart-single --template rq03-cart-single
```

```sh
npx create-react-app rq03-cart-multi --template rq03-cart-multi
```

`3.2.7 Comments in JSX`

`3.2.8 Lists of JSX objects`

```bash
npx create-react-app rq03-naive-select --template rq03-naive-select
```

Missing ID

```bash
npx create-react-app rq03-correct-select --template rq03-correct-select
```

::: {.callout-note}
Keys are local to the individual array, ...
:::

`3.2.9 Fragments in JSX`

Short syntax to replace `<Fragment>`

```javascriptreact
return (
  <>
    <h1>Hello and welcome</h1>
    <a href="/blog">Go to the blog</a>
  </>
);
```

```bash
npx create-react-app rq03-dog-breeds --template rq03-dog-breeds
```

`3.3 How to transpile JSX`

`3.4 React and JSX gotchas`

`3.4.1 Self-closing elements`

`3.4.2 Special characters`

`3.4.3 String conversion`

See [Table 3.2.](https://livebook.manning.com/book/react-quickly-second-edition/chapter-3/v-13/312){target=_blank}

| Type                     | Output      |
|--------------------------|-------------|
|"string"                  | "string"    |
| ""                       | ""          |
| 3.4                      | "3.4"       |
| 0                        | "0"         |
| NaN                      | "NaN"       |
| Number.POSITIVE_INFINITY | "Infinity"  |
| Number.NEGATIVE_INFINITY | "-Infinity" |
| true                     | "true"      |
| false                    | ""          |
| undefined                | ""          |
| null                     | ""          |

: React rendering different types

`3.4.4 Style attribute`

double curly braces ({{...}}).  The double braces are needed because one set is for JSX and the other is for the JavaScript object literal.

```javascriptreact
const smallFontSize = {fontSize: '10pt'}
<input style={smallFontSize} />
```
or
```javascriptreact
<input style={{fontSize: '10pt'}} />
```

`3.4.5 Reserved names: class and for`

Cannot use `class` or `for`, use

```javascriptreact
<p className="hidden">   </p>

<input type="checkbox" id={this.props.id} value="hasCorgi" />
<label htmlFor={this.props.id}>Corgi?</label>
```

`3.4.6 Multi-word attributes`

Any attribute with more than one English word in it, is renamed to camelCase style naming.

`3.4.7 Boolean attribute values`

```javascriptreact
<input disabled={false} />

<Alert isError>We are completely out of ice cream</Alert> // isError is true
<Alert>We are almost out of cookies</Alert>               // isError is false
```

```bash
npx create-react-app rq03-alert --template rq03-alert
```

`3.4.8 White space`

Notice `{" "}` at the end of lines.

```javascriptreact
<h1>
  All{" "}
  <em>corgis</em>{" "}
  are awesome
</h1>
```

`3.4.9 data- attributes`

## 4 Functional components

[Chpater 4 source code](https://rq2e.com/ch04){target=_blank}

the functional part refers to the component definition itself being a JavaScript function rather than a JavaScript class.

when React Hooks came in React 16.8, functional components were suddenly as powerful

`4.1 The shorter way to write React components`

`4.1.1 An example application`

```bash
npx create-react-app rq04-menu-class --template rq04-menu-class
```

```bash
npx create-react-app rq04-menu-function --template rq04-menu-function
```

`4.1.2 Destructuring properties`

```javascript
const someObject = { a: 1, b: 2, c: 3 };
const { a, b } = someObject;

function log({ message, level }) {
  console.log(level.toUpperCase(), "Message:", message);
}
log({ message: "Unknown product", level: "error" });
```

```javascriptreact
function MenuItem({ href, label }) {
  return (
    <li className="menu-item">
      <a className="menu-link" href={href}>
        {label}
      </a>
    </li>
  );
}
```

```bash
npx create-react-app rq04-menu-destruct --template rq04-menu-destruct
```

`4.1.3 Default values`

```javascriptreact
function MenuItem({ label, href, target = "_self" }) {
  return (
    <li className="menu-item">
      <a className="menu-link" href={href} target={target}>
        {label}
      </a>
    </li>
  );
}
```

```bash
npx create-react-app rq04-menu-default --template rq04-menu-default
```

`4.1.4 Pass-through properties`

the rest syntax, denoted by three periods, to specify an object, that will be assigned all the "left-over" properties not already assigned:

```javascript
const someObject = { a: 1, b: 2, c: 3, d: 4 };
const { a, b, ...otherAttrs } = someObject;
// const a = 1;
// const b = 2
// const otherAttrs = { c: 3, d: 4 };
```

Remember to wrap the spread inside brackets, otherwise, it will not work.
```javascript
const extraProps = { target: "_blank", id: "link" }
return <a href="/blog/" {...extraProps} />
```

``` {#lst-x .javascript lst-cap="Menu items with rest and spread"}
function MenuItem({ label, href, ...rest }) {
  return (
    <li className="menu-item">
      <a className="menu-link" href={href} {...rest}>
        {label}
      </a>
    </li>
  );
}
```

```bash
npx create-react-app rq04-menu-rest --template rq04-menu-rest
```

`4.2 A comparison of component types`

In general, using functional components is more elegant, more succinct, and most importantly, far easier to understand. 

`4.2.1 Benefits of functional components`

Compactness, Readability, Purity, Simplicity, Testability, Popularity

`4.2.2 Disadvantages of functional components`

None

`4.2.3 Non-differences between component types`

`4.2.4 Choosing component type`

Use functional components.

`4.3 When not to use a functional component`

`4.3.1 Error boundary`

`getDerivedStateFromError`, `componentDidCatch`

`4.3.2 Codebase is class-based`

Not read

`4.3.3 Library requires class-based components`

Not read

`4.3.4 Snapshot before updating`

`4.4 Conversion from a class-based to a functional component`

`4.4.1 Version 1: Render only`

```bash
npx create-react-app rq04-gallery-class-v1 --template rq04-gallery-class-v1
```

```bash
npx create-react-app rq04-gallery-func-v1 --template rq04-gallery-function-v1
```

`4.4.2 Version 2: Class method as utility`

pure method

```bash
npx create-react-app rq04-gallery-func-v2 --template rq04-gallery-function-v2
```

`4.4.3 Version 3: Real class method`

```bash
npx create-react-app rq04-gallery-class-v3 --template rq04-gallery-class-v3
```

```bash
npx create-react-app rq04-gallery-func-v3 --template rq04-gallery-function-v3
```

`4.4.4 Version 4: Constructor`

```bash
npx create-react-app rq04-gallery-class-v4 --template rq04-gallery-class-v4
```

`4.4.5 More complexity = harder conversion`

## 5 Making React interactive with states

stateless component, stateful component

[Chpater 5 source code](https://rq2e.com/ch05){target=_blank}

`5.1 Why is React state relevant?`

`5.1.1 React component state`

`5.1.2 Where should I put state?`

`5.1.3 What kind of information do you store in component state?`

* Application data,
  
global, mounting and unmounting, `Context`, `Redux`, `react -query`

* UI state,

local

* Form data.

local

`5.1.4 What not to store in state`

`5.2 Adding state to a functional component`

`useState` takes an initial value and returns the current state and an update function.

`useState` is a hook.

```bash
npx create-react-app rq05-functional-counter --template rq05-functional-counter
```

```{#lst-5.1 .javascript lst-cap="Listing 5.1 A fully functional counter"}
import { useState } from "react";
function Counter() {
  const [counter, setCounter] = useState(0);
  return (
    <main>
      <p>Clicks: {counter}</p>
      <button onClick={() => setCounter((value) => value + 1)}>
        Increment
      </button>
    </main>
  );
}
function App() {
  return <Counter />;
}
export default App;
```

`5.2.1 Importing and using a hook`

any function that starts with the word `use*` is a Hook

:::{.callout-note}
Rules of hooks

When you use a hook in a component, you must always use that hook. And you must use the exact same hooks in the exact same order every time you render the component.
:::

`5.2.2 Initializing the state`

```bash
npx create-react-app rq05-triple-counter --template rq05-triple-counter
```


`generatePassword()` will actually be called on every render
```javascript
function Password() {
  const [password, setPassword] = useState(generatePassword());
  
}
```

the initial value can instead be a function that returns the initial value
```javascript
const [password, setPassword] = useState(generatePassword);
```
or
```javascript
const [password, setPassword] = useState(() => generatePassword());
```

```javascript
const OPERATORS = {
  ADDITION: (a, b) => a + b,
  SUBTRACTION: (a, b) => a - b,
  PRODUCT: (a, b) => a * b,
};
function Calculator() {
  const [operator, setOperator] = useState(() => OPERATORS.ADDITION);
}
```

`5.2.3 Destructuring the state value and setter`

`5.2.4 Using the state value`

you can use multiple states rather than cram all your states into a single value

`5.2.5 Setting the state`

```bash
npx create-react-app rq05-accordion --template rq05-accordion
```

```bash
npx create-react-app rq05-calculator --template rq05-calculator
```

```bash
px create-react-app rq05-reset-counter --template rq05-reset-counter
```

Browser plugin `React Developer Tools`

`State must be set to a new value`

```bash
npx create-react-app rq05-proper-todo --template rq05-proper-todo
```

`5.2.6 Use multiple states`

```bash
npx create-react-app rq05-filter-todo --template rq05-filter-todo
```

`5.2.7 State scope`

```bash
npx create-react-app rq05-nice-todo --template rq05-nice-todo
```